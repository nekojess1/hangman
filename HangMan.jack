class HangMan{
   
   field String chosenWord;  
   field String chosenClue;                                                                       
   field String wordSpace;   
   field boolean isGameFinished;      
   field int errors;

   constructor HangMan new() {
      var int iterator;

      let iterator = 0;
      do showTitle();
      do initWordAndClue();
      let wordSpace = String.new(chosenWord.length());

      while(iterator < (chosenWord.length())) {
         let wordSpace = wordSpace.appendChar(95); 
         let iterator = iterator+1; 
      }
      return this;
   }

   method void initWordAndClue() {
      let chosenWord = Keyboard.readLine("Enter a word: ");
      let chosenClue = Keyboard.readLine("Enter a clue: ");
      do Screen.clearScreen();
      do Output.moveCursor(0,0);
      do Output.printString("Clue: ");
      do Output.printString(chosenClue);
      return;
   }

   method void showTitle() {
      var String title;                                           
      let title = "The HangMan Game";
      do Output.printString(title);
      do Output.println();
      return;
      
   }

   method void jogar() {
      var int line;
      var char chosedLetter;
       
      let errors = 0;
      let line = 2; 
      let isGameFinished = 0;
      do createHangMan();
      
      while(~(isGameFinished)) {
         do showWordSpace(line);
         let chosedLetter = Keyboard.readChar();
         let line = line + 1;
         do Output.println();
         do verifyLetter(chosedLetter);
         do verifyGameIsFinished();
      }
      return;
   }

   method void showWordSpace(int line) {
      do Output.moveCursor(line,0);
      do Output.printString(wordSpace);
      do Output.moveCursor(line,15);
      do Output.printString("Letter: ");
      return;
   }

   method void verifyLetter(char chosedLetter) {
      if (~(checkWord(chosedLetter))) {
         if (errors = 0) {
            do createHead();
         } 
         if (errors = 1) {
            do createBody();
         } 
         if (errors = 2) {
            do createLeftArm();
         }
         if (errors = 3) {
            do createRightArm();
         }
         if (errors = 4) {
            do createLeftLeg(); 
         }
         if (errors   = 5) {
            do createRightLeg();               
            let isGameFinished = -1;
            do gameOver();
         }
         let errors = errors + 1; 
      }
      return;
   }

   method void verifyGameIsFinished() {
      if (verifyDiscoveredWord()) {
            do Output.printString("Congratulations! :)");
            do Output.println();
            do Output.printString("Chosen word: ");
            do Output.printString(chosenWord);
            let isGameFinished = -1;
      }
      return;
   }

   method boolean checkWord(char letter) { 
      var int i;
      var boolean acertou;
      let i =0;
      let acertou = 0;
      while (i < chosenWord.length()) {
         if (letter = chosenWord.charAt(i)) {
            do wordSpace.setCharAt(i, letter);
	         let acertou = -1;
         }
         let i=i+1;
      }
	  return acertou;
   }
   
   method boolean verifyDiscoveredWord() {
      var int iterator;
      let iterator = 0;
      while (iterator < wordSpace.length()) {
         if (wordSpace.charAt(iterator) = 95) {
            return 0; 
         }
         let iterator = iterator+1;
      }
      return -1; 
   }

   method void gameOver() {
      do Output.printString("Game Over! :(");
      return;
   }


   method void createHangMan() { 
      do Screen.setColor(true);
      do Screen.drawRectangle(395,50,405,200);     // x1, y1 = top left, x2,y2 =  bottom right
      do Screen.drawRectangle(300,40,405,50);
      do Screen.drawRectangle(300,40,310,70);
      return;
   }
   
   method void createHead() {
      do Screen.drawCircle(305,90,20);             // position x, position y, radius 
      return;
   }

   method void createBody() {
      do Screen.drawLine(305,110, 305, 160);       // draws a line from pixel (x1,y1) to pixel (x2,y2)
      return;
   }
   method void createRightArm()
   {
      do Screen.drawLine(305,135, 320, 120);
      return;
   }

   method void createLeftArm()
   {
      do Screen.drawLine(305,135, 290, 120);
      return;
   }

    method void createLeftLeg()
   {
      do Screen.drawLine(305,160, 285, 180);
      return;
   }

   method void createRightLeg() {
      do Screen.drawLine(305,160, 325, 180);
      return;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }
}